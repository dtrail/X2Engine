<?php
/*****************************************************************************************
 * X2CRM Open Source Edition is a customer relationship management program developed by
 * X2Engine, Inc. Copyright (C) 2011-2014 X2Engine Inc.
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY X2ENGINE, X2ENGINE DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 * 
 * You can contact X2Engine, Inc. P.O. Box 66752, Scotts Valley,
 * California 95067, USA. or at email address contact@x2engine.com.
 * 
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 * 
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by
 * X2Engine" logo. If the display of the logo is not reasonably feasible for
 * technical reasons, the Appropriate Legal Notices must display the words
 * "Powered by X2Engine".
 *****************************************************************************************/

Yii::import('zii.widgets.grid.CGridView');

/**
 * Custom grid view display function.
 *
 * Displays a dynamic grid view that permits save-able resizing and reordering of
 * columns and also the adding of new columns based on the available fields for
 * the model.
 *
 * @property string $moduleName Name of the module that the grid view is being
 *  used in, for purposes of access control.
 * @property bool $isAdmin If true, the grid view will be generated under the
 *  assumption that the user viewing it has full/administrative access to
 *  whichever module that it is being used in.
 * @package X2CRM.components
 */
class X2GridView extends CGridView {
    public $selectableRows = 0;

    protected $_moduleName;
    protected $_isAdmin;

    public $modelName;
    public $viewName;
    public $enableGvSettings = true;

    public $fullscreen = false;

    public $defaultGvSettings;
    // jquery for generating defaults:
    // var a=''; $('.x2-gridview tr:first th:not(:last)').each(function(i,elem){a+="\t\t'"+$(elem).attr("id").substr(2)+"' => "+$(elem).width()+",\n";}); a;

    public $specialColumns;
    public $excludedColumns;
    public $enableControls = false;
    public $enableTags = false;

    public $fixedHeader = false;

    public $summaryText;

    public $buttons = array();
    public $title;
    public $massActions = array ();

    /**
     * @var bool If true, window will automatically scroll to the top when the page is changed
     */
    public $enableScrollOnPageChange = true;

    // JS which will be executed before/after yiiGridView.update () updates the grid view
    public $afterGridViewUpdateJSString = "";
    public $beforeGridViewUpdateJSString = "";

    protected $allFields = array();
    protected $allFieldNames = array();
    protected $specialColumnNames = array();
    protected $gvSettings = null;
    protected $columnSelectorId;
    protected $columnSelectorHtml;
    protected $ajax = false;

    /**
     * @var string Set to view name if value not passed to constructor. Used to save/access
     *  gridview settings saved as a JSON property in the profile model
     */
    protected $_gvSettingsName;

    /**
     * @var string Used to prefix javascript namespaces, GET parameter keys, Script names, and HTML
     *  attributes. Allows multiple instances of X2GridView to work on the same page. Generated by
     *  whitelisting the gridview id. 
     */
    protected $_namespacePrefix;

    /**
     * @var array the JS prototype name followed by properties of that prototype 
     */
    public $qtipManager;

    /**
     * @var bool whether qtips should be used, refresh method should be defined in a JS sub 
     *  prototype of X2QtipManager
     */
    public $enableQtips = false;

    /**
     * Magic setter for gvSettingsName. 
     * @param string $gvSettingsName
     */
    public function setGvSettingsName ($gvSettingsName) {
        $this->_gvSettingsName = $gvSettingsName;
    }

    /**
     * Magic getter for gvSettingsName. If not set explicitly, will be set to viewName
     * @return string  
     */
    public function getGvSettingsName () {
        if (isset ($this->_gvSettingsName)) {
            return $this->_gvSettingsName;
        } else if (isset ($this->viewName) && !isset ($this->_gvSettingsName)) {
            $this->_gvSettingsName = $this->viewName;
        }
        return $this->_gvSettingsName;
    }

    /**
     * Magic setter for _namespacePrefix 
     * @param string
     */
    public function setNamespacePrefix ($namespacePrefix) {
        $this->_namespacePrefix = $namespacePrefix;
    }

    /**
     * Magic getter for _namespacePrefix 
     * @return string
     */
    public function getNamespacePrefix () {
        if (!isset ($this->_namespacePrefix)) {
            $this->_namespacePrefix = preg_replace ('/($[0-9])|([^a-zA-Z0-9_$])/', '', $this->id);
        }
        return $this->_namespacePrefix;
    }

    public static function getFilterHintText () {

        $text = Yii::t('app','<b>Tip:</b> You can use the following comparison operators with '.
            'filter values to fine-tune your search.');
        $text .= '<ul class="filter-hint">';
        $text .= '<li><b>&lt;</b> '        .Yii::t('app','less than')                .'</li>';
        $text .= '<li><b>&lt;=</b> '    .Yii::t('app','less than or equal to')        .'</li>';
        $text .= '<li><b>&gt;</b> '        .Yii::t('app','greater than')            .'</li>';
        $text .= '<li><b>&gt;=</b> '    .Yii::t('app','greater than or equal to')    .'</li>';
        $text .= '<li><b>=</b> '        .Yii::t('app','equal to')                    .'</li>';
        $text .= '<li><b>&lt;&gt</b> '    .Yii::t('app','not equal to')                .'</li>';
        $text .= '</ul>';
        return $text;
    }

    public static function getFilterHint() {
        $text = self::getFilterHintText ();
        return X2Info::hint($text,false,'filter-hint');
    }

    public function getIsAdmin() {
        if(!isset($this->_isAdmin)) {
            $this->_isAdmin = (bool) Yii::app()->user->checkAccess(ucfirst($this->moduleName).'AdminAccess');
        }
        return $this->_isAdmin;
    }

    public function getModuleName() {
        if(!isset($this->_moduleName)) {
            if(!isset(Yii::app()->controller->module))
                throw new CException('X2GridView cannot be used both outside of a module that uses X2Model and without specifying its moduleName property.');
            $this->_moduleName = Yii::app()->controller->module->getName();
        }
        return $this->_moduleName;
    }


    /**
     * Registers JS which makes the grid header sticky
     * Preconditions:
     *     - The CGridView template string must be set up in a highly specific way
     *         - Example:
	 *              '<div id="x2-gridview-top-bar-outer" class="x2-gridview-fixed-top-bar-outer">
     *               <div id="x2-gridview-top-bar-inner" class="x2-gridview-fixed-top-bar-inner">
     *               <div id="x2-gridview-page-title" class="x2-gridview-fixed-title">
     *               {items}{pager}'
     *          - there must be a pager and items.
     *          - the three opening divs with the specified classes and ids are required. The divs
     *            get closed after the grid header is printed.
     *     - the X2GridView propert fixedHeader must be set to true
     */
    public function setUpStickyHeader () {

        $makeHeaderStickyStr = "
            x2.gridviewStickyHeader.DEBUG && console.log ($('#".$this->id."').find ('.x2grid-body-container').find ('.x2grid-resizable').find ('tbody').find ('tr').length);

            if ($('#".$this->id."').find ('.x2grid-body-container').find ('.x2grid-resizable').
                find ('tbody').find ('tr').length <= 2 || x2.isIPad || x2.isAndroid) {

                x2.gridviewStickyHeader.DEBUG && console.log ('make sticky');
                x2.gridviewStickyHeader.makeSticky ();
            } else if (!$(x2.gridviewStickyHeader.titleContainer).
                hasClass ('x2-gridview-fixed-top-bar-outer')) {

                x2.gridviewStickyHeader.DEBUG && console.log ('make unsticky');
                x2.gridviewStickyHeader.makeUnsticky ();
            }

            x2.gridviewStickyHeader.DEBUG && console.log ('after grid update');
            if (!x2.gridviewStickyHeader.isStuck &&
                !x2.gridviewStickyHeader.checkX2GridViewHeaderSticky ()) {

                $(window).
                    unbind (
                        'scroll.stickyHeader',
                        x2.gridviewStickyHeader.checkX2GridViewHeaderSticky).
                    bind (
                        'scroll.stickyHeader',
                        x2.gridviewStickyHeader.checkX2GridViewHeaderSticky);
            }
        ";

        $this->addToAfterAjaxUpdate ($makeHeaderStickyStr);

        Yii::app ()->clientScript->registerScript ('x2GridViewStickyHeaderVarInit', "
            x2.gridviewStickyHeader.headerContainer =
                $('#".$this->id."').find ('.x2grid-header-container');
            x2.gridviewStickyHeader.titleContainer = $('#x2-gridview-top-bar-outer');
            x2.gridviewStickyHeader.bodyContainer =
                $('#".$this->id."').find ('.x2grid-body-container');
            x2.gridviewStickyHeader.pagerHeight =
                $('#".$this->id."').find ('.pager').length ?
                    $('#".$this->id."').find ('.pager').height () : 7;
            x2.gridviewStickyHeader.stickyHeaderHeight =
                $(x2.gridviewStickyHeader.headerContainer).height () +
                $(x2.gridviewStickyHeader.titleContainer).height ();
            x2.gridviewStickyHeader.x2TitleBarHeight = $('#header-inner').height ();

        ", CClientScript::POS_READY);

        Yii::app ()->clientScript->registerScript ('x2GridViewStickyHeader', "
            x2.gridviewStickyHeader = {};
            x2.gridviewStickyHeader.DEBUG = false && x2.DEBUG;
            x2.gridviewStickyHeader.isStuck;

            x2.gridviewStickyHeader.makeSticky = function () {
                var bodyContainer = x2.gridviewStickyHeader.bodyContainer;
                var \$titleBar =
                    $('#x2-gridview-top-bar-outer').removeClass ('x2-gridview-fixed-top-bar-outer')
                $(bodyContainer).find ('table').removeClass ('x2-gridview-body-with-fixed-header');

                $('.column-selector').addClass ('stuck');
                $('#".$this->getId ()."-mass-action-buttons .more-drop-down-list').
                    addClass ('stuck');
                x2.gridviewStickyHeader.isStuck = true;
            };

            x2.gridviewStickyHeader.makeUnsticky = function () {
                var bodyContainer = x2.gridviewStickyHeader.bodyContainer;
                var \$titleBar =
                    $('#x2-gridview-top-bar-outer').addClass ('x2-gridview-fixed-top-bar-outer')
                $(bodyContainer).find ('table').addClass ('x2-gridview-body-with-fixed-header');

                $('.column-selector').removeClass ('stuck');
                $('#".$this->getId ()."-mass-action-buttons .more-drop-down-list').
                    removeClass ('stuck');
                x2.gridviewStickyHeader.isStuck = false;
            };

            /*
            Bound to window scroll event. Check if the grid header should be made sticky.
            */
            x2.gridviewStickyHeader.checkX2GridViewHeaderSticky = function () {
                var headerContainer = x2.gridviewStickyHeader.headerContainer;
                var titleContainer = x2.gridviewStickyHeader.titleContainer;
                var bodyContainer = x2.gridviewStickyHeader.bodyContainer;
                var pagerHeight = x2.gridviewStickyHeader.pagerHeight;
                var stickyHeaderHeight = x2.gridviewStickyHeader.stickyHeaderHeight;
                var x2TitleBarHeight = x2.gridviewStickyHeader.x2TitleBarHeight;

                // check if none of grid view body is visible
                if (($(bodyContainer).offset ().top + $(bodyContainer).height ()) -
                    ($(window).scrollTop () + stickyHeaderHeight + x2TitleBarHeight + 5) < 0) {

                    //x2.gridviewStickyHeader.isStuck = true;
                    x2.gridviewStickyHeader.DEBUG && console.log ('sticky');

                    $(titleContainer).hide ();

                    /* unfix header */
                    //$(bodyContainer).hide ();
                    /*var \$titleBar =
                        $('#x2-gridview-top-bar-outer').removeClass (
                            'x2-gridview-fixed-top-bar-outer')
                    \$titleBar.attr (
                        'style', 'margin-top: ' +
                        (($(bodyContainer).height () - stickyHeaderHeight - pagerHeight) + 5) +
                        'px');*/

                    // hide mass actions dropdown
                    /*if ($('#more-drop-down-list').length) {
                        if ($('#more-drop-down-list').is (':visible')) {
                            x2.gridviewStickyHeader.listWasVisible = true;
                            $('#more-drop-down-list').hide ();
                        } else {
                            x2.gridviewStickyHeader.listWasVisible = false;
                        }
                    }*/

                    if ($('.column-selector').length) {
                        if ($('.column-selector').is (':visible')) {
                            x2.gridviewStickyHeader.columnSelectorWasVisible = true;
                            $('.column-selector').hide ();
                        } else {
                            x2.gridviewStickyHeader.columnSelectorWasVisible = false;
                        }
                    }

                    $(window).
                        unbind (
                            'scroll.stickyHeader',
                            x2.gridviewStickyHeader.checkX2GridViewHeaderSticky).
                        bind (
                            'scroll.stickyHeader',
                            x2.gridviewStickyHeader.checkX2GridViewHeaderUnsticky);

                    x2.gridviewStickyHeader.cachedTitleContainerOffsetTop =
                        $(titleContainer).offset ().top;
                } else {
                    return false;
                }
            };

            /*
            Bound to window scroll event. Check if the grid header should be made fixed.
            */
            x2.gridviewStickyHeader.checkX2GridViewHeaderUnsticky = function () {
                var titleContainer = x2.gridviewStickyHeader.titleContainer;
                var x2TitleBarHeight = x2.gridviewStickyHeader.x2TitleBarHeight;


                // check if grid header needs to be made unsticky
                if ((($(window).scrollTop () + x2TitleBarHeight) -
                    x2.gridviewStickyHeader.cachedTitleContainerOffsetTop) < 20) {
                    //x2.gridviewStickyHeader.DEBUG && console.log ('unsticky');

                    $(titleContainer).show ();

                    /*var bodyContainer = x2.gridviewStickyHeader.bodyContainer;
                    x2.gridviewStickyHeader.isStuck = false;*/

                    /* fix header */
                    /*var \$titleBar =
                        $('#x2-gridview-top-bar-outer').
                            addClass ('x2-gridview-fixed-top-bar-outer');
                    \$titleBar.attr ('style', '');
                    $(bodyContainer).show ();*/

                    //for (var i = 0; i < 1000; ++i) console.log (i);

                    // show mass actions dropdown
                    /*if (x2.gridviewStickyHeader.listWasVisible &&
                          $('#more-drop-down-list').length) {
                        $('#more-drop-down-list').show ();
                    }*/
                    if (x2.gridviewStickyHeader.columnSelectorWasVisible &&
                        $('.column-selector').length &&
                        $('.column-selector-link').hasClass ('clicked')) {

                        $('.column-selector').show ();
                    }


                    $(window).
                        unbind (
                            'scroll.stickyHeader',
                            x2.gridviewStickyHeader.checkX2GridViewHeaderUnsticky).
                        bind ('scroll.stickyHeader',
                            x2.gridviewStickyHeader.checkX2GridViewHeaderSticky);
                }
            };
        ", CClientScript::POS_HEAD);

    }

    protected function addFieldNames () {
        // add tags column if specified
        if($this->enableTags)
            $this->allFieldNames['tags'] = Yii::t('app','Tags');

        foreach($this->allFields as $fieldName=>&$field) {
            $this->allFieldNames[$fieldName] =
                X2Model::model($this->modelName)->getAttributeLabel($field->fieldName);
        }
    }

    protected function handleFields () {
        $fields = X2Model::model($this->modelName)->getFields();

        $fieldPermissions = array();
        if(!$this->isAdmin && !empty(Yii::app()->params->roles)) {
            $rolePermissions = Yii::app()->db->createCommand()
                ->select('fieldId, permission')
                ->from('x2_role_to_permission')
                ->join('x2_fields','x2_fields.modelName="'.$this->modelName.
                    '" AND x2_fields.id=fieldId AND roleId IN ('.
                    implode(',',Yii::app()->params->roles).')')
                ->queryAll();
            // var_dump($rolePermissions);

            foreach($rolePermissions as &$permission) {
                if(!isset($fieldPermissions[$permission['fieldId']]) ||
                   $fieldPermissions[$permission['fieldId']] < (int)$permission['permission']) {

                    $fieldPermissions[$permission['fieldId']] = (int)$permission['permission'];
                }
            }
        }

        // Begin setting fields
        foreach($fields as $field) {
            if (isset($this->excludedColumns[$field->fieldName]))
                continue;
            if((!isset($fieldPermissions[$field->id]) || $fieldPermissions[$field->id] > 0))
                $this->allFields[$field->fieldName] = $field;
        }

        return $fields;
    }

    protected function getSpecialColumnName ($columnName) {
        return  X2Model::model($this->modelName)->getAttributeLabel($columnName);

    }

    protected function createDefaultStyleColumn ($columnName, $width, $isCurrency) {
        return null;
    }

    protected function createSpecialColumn ($columnName, $width) {
        $newColumn = $this->specialColumns[$columnName];
        // $newColumn['name'] = 'lastName';
        $newColumn['id'] = $this->namespacePrefix.'C_'.$columnName;
        // $newColumn['header'] = Yii::t('contacts','Name');
        $newColumn['headerHtmlOptions'] = array('style'=>'width:'.$width.'px;');
        // $newColumn['value'] = 'CHtml::link($data->firstName." ".$data->lastName,array("view","id"=>$data->id))';
        // $newColumn['type'] = 'raw';
        // die(print_r($newColumn));
        return $newColumn;
    }


    public function init() {
        $this->pager = array (
            'class' => 'CLinkPager', 
            'header' => '',
            'htmlOptions' => array ('id' => $this->namespacePrefix . 'Pager'));

        $this->baseScriptUrl = Yii::app()->theme->getBaseUrl().'/css/gridview';

        $this->excludedColumns = empty($this->excludedColumns)?array():
            array_fill_keys($this->excludedColumns,1);

        // $this->id is the rendered HTML element's ID, i.e. "contacts-grid"
        $this->ajax = isset($_GET[$this->ajaxVar]) && $_GET[$this->ajaxVar]===$this->id;

        if($this->ajax) ob_clean();

        // $this->selectionChanged = 'js:function() { console.debug($.fn.yiiGridView.getSelection("'.$this->id.'")); }';

        // if(empty($this->modelName))
            // $this->modelName = $this->getId();
        if(empty($this->viewName))
            $this->viewName = $this->modelName;
        if($this->modelName=='Quotes')
            $this->modelName='Quote';


        $this->columnSelectorId = $this->getId() . '-column-selector';

        /* 
        Get gridview settings by looking in the URL:
        This condition will pass in the case that an ajax update occurs following an ajax request 
        to save the grid view settings. It is necessary because it allows the grid view to render 
        properly even before the new grid view settings have been saved to the database.
        */
        if(isset($_GET[$this->namespacePrefix.'gvSettings']) && isset ($this->gvSettingsName)) {

            $this->gvSettings = json_decode($_GET[$this->namespacePrefix.'gvSettings'],true);
            // unset($_GET['gvSettings']);
            // die(var_dump($this->gvSettings));

            ProfileChild::setGridviewSettings($this->gvSettings,$this->gvSettingsName);
        } else {
            $this->gvSettings = ProfileChild::getGridviewSettings($this->gvSettingsName);
        }
        // Use the hard-coded defaults (note: gvSettings has column name keys:
        if($this->gvSettings == null)
            $this->gvSettings = $this->defaultGvSettings;
        // die(var_dump($this->gvSettings));
        // die(var_dump(ProfileChild::getGridviewSettings($this->viewName)));

        // load names from $specialColumns into $specialColumnNames
        foreach($this->specialColumns as $columnName => &$columnData) {
            if(isset($columnData['header'])) {
                $this->specialColumnNames[$columnName] = $columnData['header'];
            } else {
                $this->specialColumnNames[$columnName] = $this->getSpecialColumnName ($columnName);
            }
        }

        // start allFieldNames with the special fields
        if(!empty($this->specialColumnNames))
            $this->allFieldNames = $this->specialColumnNames;

        // add controls column if specified
        if($this->enableControls)
            $this->allFieldNames['gvControls'] = Yii::t('app','Tools');

        $this->allFieldNames['gvCheckbox'] = Yii::t('app', 'Checkbox');

        // load fields from DB
        // $fields=Fields::model()->findAllByAttributes(array('modelName'=>ucwords($this->modelName)));

        $fields = $this->handleFields ();

        $this->addFieldNames ();

        // update columns if user has submitted data
        // has the user changed column visibility?
        if(isset($_GET[$this->namespacePrefix.'columns']) && isset ($this->gvSettingsName)) {
            //isset($_GET['viewName']) && $_GET['viewName'] == $this->viewName) { 

            foreach(array_keys($this->gvSettings) as $key) {
                // search $_GET['columns'] for the column
                $index = array_search($key,$_GET[$this->namespacePrefix.'columns']);

                if($index === false) { // if it's not in there,
                    unset($this->gvSettings[$key]); // delete that junk
                } else { // othwerise, remove it from $_GET['columns']

                    // so the next part doesn't add it a second time
                    unset($_GET[$this->namespacePrefix.'columns'][$index]);
                }
            }

            // now go through $allFieldNames and add any fields that
            foreach(array_keys($this->allFieldNames) as $key) {
                if(!isset($this->gvSettings[$key]) && 
                   in_array($key,$_GET[$this->namespacePrefix.'columns'])) {
                    // are present in $_GET['columns'] but not already in the list

                    $this->gvSettings[$key] = 80; // default width of 80
                }
            }
        }
        
        // prevents columns data from ending up in sort/pagination links
        unset($_GET[$this->namespacePrefix.'columns']); 
        unset($_GET['viewName']);
        unset($_GET[$this->namespacePrefix.'gvSettings']);
/*
        // adding/removing columns changes the total width,
        // so let's scale the columns to match the correct total (590px)
        $totalWidth = array_sum(array_values($this->gvSettings));

        if($totalWidth > 0) {
            $widthFactor = (585 ) / $totalWidth; //- count($this->gvSettings)
            $sum = 0;
            $scaledSum = 0;
            foreach($this->gvSettings as $columnName => &$columnWidth) {
                $sum += $columnWidth;
                $columnWidth = round(($sum) * $widthFactor)-$scaledSum;        // map each point onto the nearest integer in the scaled space
                $scaledSum += $columnWidth;
            }
        } */
        // die(var_dump($this->gvSettings).' '.$this->viewName);

       // save the new Gridview Settings
        Profile::setGridviewSettings($this->gvSettings,$this->gvSettingsName);

        // die(var_dump($this->gvSettings));

        $columns = array();

        $datePickerJs = '';

        $staticModel = X2Model::model($this->modelName);
        $fieldModels = $staticModel instanceof X2Model ? $staticModel->getFields(true) : array();

        foreach($this->gvSettings as $columnName => $width) {
            if($columnName=='gvControls' && !$this->enableControls){
                continue;
            }

            // $width = (!empty($width) && is_numeric($width))? 'width:'.$width.'px;' : null;    // make sure width is reasonable, then convert it to CSS

            // make sure width is reasonable
            $width = (!empty($width) && is_numeric($width))? $width : null;

            // $isDate = in_array($columnName,array('createDate','completeDate','lastUpdated','dueDate', 'expectedCloseDate', 'expirationDate', 'timestamp','lastactivity'));

            $isCurrency = in_array($columnName,array('annualRevenue','quoteAmount'));

            $lang = (Yii::app()->language == 'en')? '':Yii::app()->getLanguage();

            //if($isDate)
                //$datePickerJs .= ' $("#'.$columnName.'DatePicker").datepicker('
                    //.'$.extend({showMonthAfterYear:false}, {"dateFormat":"'.Formatter::formatDatePicker().'"})); ';
                    // .'{"showAnim":"fold","dateFormat":"yy-mm-dd","changeMonth":"true","showButtonPanel":"true","changeYear":"true","constrainInput":"false"}));';


            $newColumn = array();

            if(array_key_exists($columnName,$this->specialColumnNames)) {
                $columns[] = $this->createSpecialColumn ($columnName, $width);

            } else if(isset ($fields) && 
                (array_key_exists($columnName, $this->allFields))) { // && $this->allFields[$columnName]->visible == 1)) {

                $newColumn['name'] = $columnName;
                $newColumn['id'] = $this->namespacePrefix.'C_'.$columnName;
                $newColumn['header'] = X2Model::model($this->modelName)->getAttributeLabel($columnName);
                $newColumn['fieldModel'] = isset($fieldModels[$columnName]) ? $fieldModels[$columnName]->attributes : array();
                $newColumn['headerHtmlOptions'] = array('style'=>'width:'.$width.'px;');

                if($isCurrency) {
                    $newColumn['value'] = 'Yii::app()->locale->numberFormatter->'.
                        'formatCurrency($data["'.$columnName.'"],Yii::app()->params->currency)';
                    $newColumn['type'] = 'raw';
                } else if($columnName == 'assignedTo' || $columnName == 'updatedBy') {
                    $newColumn['value'] = 'empty($data["'.$columnName.'"])?'.
                        'Yii::t("app","Anyone"):User::getUserLinks($data["'.$columnName.'"])';
                    $newColumn['type'] = 'raw';
                } elseif($this->allFields[$columnName]->type=='date') {
                    $newColumn['value'] = 'empty($data["'.$columnName.'"])? "" : '.
                        'Formatter::formatLongDate($data["'.$columnName.'"])';
                } elseif($this->allFields[$columnName]->type=='percentage') {
                    $newColumn['value'] = '$data["'.$columnName.'"]!==null&&$data["'.
                        $columnName.'"]!==""?((string)($data["'.$columnName.'"]))."%":null';
                } elseif($this->allFields[$columnName]->type=='dateTime') {
                    $newColumn['value'] = 'empty($data["'.$columnName.'"])? "" : '.
                        'Yii::app()->dateFormatter->formatDateTime($data["'.
                        $columnName.'"],"medium")';
                } elseif($this->allFields[$columnName]->type=='link') {
                    $newColumn['value'] = '!is_numeric($data["'.$columnName.'"])?$data["'.
                        $columnName.'"]:X2Model::getModelLink($data["'.$columnName.
                        '"],X2Model::getModelName("'.$this->allFields[$columnName]->linkType.'"))';
                    $newColumn['type'] = 'raw';
                } elseif($this->allFields[$columnName]->type=='boolean') {
                    $newColumn['value']='$data["'.$columnName.'"]==1?Yii::t("actions","Yes"):'.
                        'Yii::t("actions","No")';
                    $newColumn['type'] = 'raw';
                }elseif($this->allFields[$columnName]->type=='phone'){
                    $newColumn['type'] = 'raw';
                    $newColumn['value'] = 'X2Model::getPhoneNumber("'.$columnName.'","'.
                        $this->modelName.'",$data["id"])';
                }


                if(Yii::app()->language == 'en') {
                    $format =  "M d, yy";
                } else {

                    // translate Yii date format to jquery
                    $format = Yii::app()->locale->getDateFormat('medium');

                    $format = str_replace('yy', 'y', $format);
                    $format = str_replace('MM', 'mm', $format);
                    $format = str_replace('M','m', $format);
                }

                $columns[] = $newColumn;

            } else if($columnName == 'gvControls') {
                $newColumn['id'] = $this->namespacePrefix.'C_gvControls';
                $newColumn['class'] = 'CButtonColumn';
                $newColumn['header'] = Yii::t('app','Tools');
                $newColumn['headerHtmlOptions'] = array('style'=>'width:'.$width.'px;');
                if(!$this->isAdmin)
                    $newColumn['template'] = '{view}{update}';

                $columns[] = $newColumn;

            } else if($columnName == 'tags') {
                $newColumn['id'] = $this->namespacePrefix.'C_'.'tags';
                // $newColumn['class'] = 'CDataColumn';
                $newColumn['header'] = Yii::t('app','Tags');
                $newColumn['headerHtmlOptions'] = array('style'=>'width:'.$width.'px;');
                $newColumn['value'] = 'Tags::getTagLinks("'.$this->modelName.'",$data->id,2)';
                $newColumn['type'] = 'raw';
                $newColumn['filter'] = CHtml::textField(
                    'tagField',isset($_GET['tagField'])? $_GET['tagField'] : '');

                $columns[] = $newColumn;
            } else if ($columnName == 'gvCheckbox') {
                $newColumn['id'] = $this->namespacePrefix.'C_gvCheckbox';
                $newColumn['class'] = 'CCheckBoxColumn';
                $newColumn['selectableRows'] = 2;
                $newColumn['headerHtmlOptions'] = array('style'=>'width:'.$width.'px;');

                $columns[] = $newColumn;
            } else if (!isset ($fields)) {
                $columns[] = $this->createDefaultStyleColumn ($columnName, $width, $isCurrency);
            }
        }
        $columns[] = array('value'=>'','header'=>''/* ,'headerHtmlOptions'=>array('style'=>'width:0px;') */);        // one blank column for the resizing widget

        $this->columns = $columns;


        natcasesort($this->allFieldNames); // sort column names

        // generate column selector HTML
        $this->columnSelectorHtml = CHtml::beginForm(array('/site/saveGvSettings'),'get')
            .'<ul class="column-selector'.
            ($this->fixedHeader ? ' fixed-header' : '').'" id="'.$this->columnSelectorId.'">';
        $i = 0;
        foreach($this->allFieldNames as $fieldName=>&$attributeLabel) {
            $i++;
            $selected = array_key_exists($fieldName,$this->gvSettings);
            $this->columnSelectorHtml .= "<li>"
            .CHtml::checkbox($this->namespacePrefix.'columns[]',$selected,array(
                'value'=>$fieldName,
                'id'=>$this->namespacePrefix.'checkbox-'.$i
            ))
            .CHtml::label($attributeLabel,$fieldName.'_checkbox')
            ."</li>";
        }
        $this->columnSelectorHtml .= '</ul></form>';
        // Yii::app()->clientScript->renderBodyBegin($columnHtml);
        // Yii::app()->clientScript->registerScript(__CLASS__.'#'.$this->getId().'_columnSelector',
        // "$('#".$this->getId()." table').after('".addcslashes($columnHtml,"'")."');

        // ",CClientScript::POS_READY);
        $themeURL = Yii::app()->theme->getBaseUrl();

        Yii::app()->clientScript->registerScript('logos',base64_decode(
            'JCh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXt2YXIgYT0kKCIjcG93ZXJlZC1ieS14MmVuZ2luZSIpO2lmKCFhLmxlb'
            .'md0aHx8YS5hdHRyKCJzcmMiKSE9eWlpLmJhc2VVcmwrIi9pbWFnZXMvcG93ZXJlZF9ieV94MmVuZ2luZS5wbmciK'
            .'XskKCJhIikucmVtb3ZlQXR0cigiaHJlZiIpO2FsZXJ0KCJQbGVhc2UgcHV0IHRoZSBsb2dvIGJhY2siKX19KTs='));

        $this->setSummaryText ();

        // $this->afterAjaxUpdate = 'function(id, data) { '.$datePickerJs.' }';
        // if(!empty($this->afterAjaxUpdate))
            // $this->afterAjaxUpdate = "var callback = ".$this->afterAjaxUpdate.";
        // if(typeof callback == 'function') callback();";

        /* $this->afterAjaxUpdate = " function(id,data) {
            ".$this->afterAjaxUpdate." ".$datePickerJs;*/

        // if($this->enableGvSettings) {
            // $this->afterAjaxUpdate.="
            // $('#".$this->getId()." table').gvSettings({
                // viewName:'".$this->viewName."',
                // columnSelectorId:'".$this->columnSelectorId."',
                // ajaxUpdate:true
            // });";
        // }
        // $this->afterAjaxUpdate .= " } ";
        /*if(isset(Yii::app()->controller->module) &&
           Yii::app()->controller->module->id=='contacts'){*/
            /* after user moves to a different page, make sure the tool tips get added to the
            newly showing rows */
            $this->addToAfterAjaxUpdate ('
                    $(".qtip-hint").qtip({content:false});
                    $("#'.$this->getNamespacePrefix ().'-filter-hint").qtip ();
            ');
        //}

        $this->addToAfterAjaxUpdate (
            "$('#".$this->getId()."').gvSettings({
                viewName:'".$this->gvSettingsName."',
                columnSelectorId:'".$this->columnSelectorId."',
                columnSelectorHtml:'".addcslashes($this->columnSelectorHtml,"'")."',
                namespacePrefix:'".$this->namespacePrefix."',
                ajaxUpdate:".($this->ajax?'true':'false').",
                fixedHeader: ".($this->fixedHeader ? 'true' : 'false').",
                enableScrollOnPageChange: ".($this->enableScrollOnPageChange ? 'true' : 'false')."
            });");

        if ($this->enableQtips) $this->setUpQtipManager ();
        if ($this->fixedHeader) $this->setUpStickyHeader ();

        // Re-enable a datepicker widget in the data columns
        $this->addToAfterAjaxUpdate ("
                $('.datePicker').datepicker();
        ");

        parent::init();
    }

    public function setSummaryText () {
        if ($this instanceof X2GridViewForSortableWidgets ||
            $this instanceof X2GridViewLessForSortableWidgets) {
            $this->setSummaryTextForSortableWidgets ();
            return;
        }

        /* add a dropdown to the summary text that let's user set how many rows to show on each 
           page */
        $this->summaryText = Yii::t('app','<b>{start}&ndash;{end}</b> of <b>{count}</b>').
            '<div class="form no-border" style="display:inline;"> '.
            CHtml::dropDownList(
                'resultsPerPage', 
                Profile::getResultsPerPage(),
                Profile::getPossibleResultsPerPage(), 
                array(
                    'class' => 'x2-minimal-select',
                    'onchange' => '$.ajax ({'.
                        'data: {'.
                            'results: $(this).val ()'.
                        '},'.
                        'url: "'.$this->controller->createUrl('/profile/setResultsPerPage').'",'.
                        'complete: function (response) {'.
                            'console.log ("setResultsPerPage after ajax");'.
                            //$this->beforeGridViewUpdateJSString.
                            '$.fn.yiiGridView.update("'.$this->id.'", {'.
                                (isset($this->modelName) ?
                                    'data: {'.$this->modelName.'_page: 1},' : '') .
                                    'complete: function () {'.
                                        //$this->afterGridViewUpdateJSString .
                                    '}'.
                            '});'.
                        '}'.
                    '});'
                )). 
            '</div>';
    }

    public function getAfterAjaxUpdateStr () {
        return $this->afterGridViewUpdateJSString;
    }

    public function getBeforeAjaxUpdateStr () {
        return $this->beforeGridViewUpdateJSString;
    }

    public function addToAfterAjaxUpdate ($str) {
        $this->afterGridViewUpdateJSString .= $str;
        if ($this->ajax) return;
        $this->afterAjaxUpdate =
            'js: function(id, data) {'.
                '//console.log ("after ajax update internal");'.
                $this->afterGridViewUpdateJSString.
            '}';
    }

    public function addToBeforeAjaxUpdate ($str) {
        $this->beforeGridViewUpdateJSString .= $str;
        if ($this->ajax) return;
        $this->beforeAjaxUpdate =
            'js: function(id, data) {'.
                '//console.log ("before ajax update internal");'.
                $this->beforeGridViewUpdateJSString .
            '}';
    }

    public function run() {
        if($this->ajax) {
            // remove any external JS and CSS files
            /*Yii::app()->clientScript->scriptMap['*.js'] = false;*/
            Yii::app()->clientScript->scriptMap['*.css'] = false;
        }

        /* give this a special class so the javascript can tell it apart from the regular, lame
        gridviews */
        if(!isset($this->htmlOptions['class']))
            $this->htmlOptions['class'] = '';
        $this->htmlOptions['class'] .= ' x2-gridview';
        if($this->fullscreen)
            $this->htmlOptions['class'] .= ' fullscreen';

        echo CHtml::openTag($this->tagName,$this->htmlOptions)."\n";

        $this->renderContent();
        $this->renderKeys();

        if($this->ajax) {
            /* remove JS for gridview checkboxes and delete buttons (these events use jQuery.on()
            and shouldn't be reapplied) */
            //Yii::app()->clientScript->registerScript('CButtonColumn#C_gvControls',null);
            //Yii::app()->clientScript->registerScript('CCheckBoxColumn#C_gvCheckbox',null);

            /*$output = '';
            Yii::app()->getClientScript()->renderBodyEnd($output);
            echo $output;*/

            echo CHtml::closeTag($this->tagName);
            ob_flush();


            Yii::app()->end();
        }
        echo CHtml::closeTag($this->tagName);

        $this->registerClientScript();
        Yii::app ()->clientScript->registerScript (
            $this->namespacePrefix.'gridAfterRender', $this->afterGridViewUpdateJSString, 
            CClientScript::POS_READY);

    }



    /**
    * Renders the data items for the grid view.
    */
     public function renderItems() {

        if($this->dataProvider->getItemCount() > 0 || $this->showTableOnEmpty) {
            $pagerDisplayed = $this->dataProvider->getPagination()->getPageCount () > 1;
            if($this->enableGvSettings) {
                if ($this->fixedHeader) echo '</div>';
                echo '<div class="x2grid-header-container">';
            }

            echo '<table class="',$this->itemsCssClass,'">';
            $this->renderTableHeader();

            if($this->enableGvSettings) {
                echo '</table></div>';
                if ($this->fixedHeader) echo '</div></div>';
                echo '<div class="x2grid-body-container'.
                    (!$pagerDisplayed ? ' x2grid-no-pager' : '').'"><table class="'.
                    $this->itemsCssClass.
                    ($this->fixedHeader ? ' x2-gridview-body-with-fixed-header' : '')."\">\n";
            }

            ob_start();
            $this->renderTableBody();
            $body = ob_get_clean();
            $this->renderTableFooter();
            echo $body; // TFOOT must appear before TBODY according to the standard.
            echo '</table>';

            if($this->enableGvSettings)
                echo '</div>';
        } else {
            $this->renderEmptyText();
        }

        echo "<div class='x2-gridview-updating-anim x2-loading-icon' style='display: none;'>".
             "</div>";
    }

    /**
     * If enableQtips is true, instantiates the qtipManager prototype with configuration and 
     * prototype specified in qtipManager
     */
    protected function setUpQtipManager () {
        if (!$this->enableQtips || !isset ($this->qtipManager)) return;

        $protoName = $this->qtipManager[0];
        $protoProps = array_slice ($this->qtipManager, 1);
        Yii::app()->clientScript->registerScriptFile (Yii::app()->getBaseUrl().
            '/js/'.$protoName.'.js');

        Yii::app()->clientScript->registerScript($this->namespacePrefix.'qtipSetup', '
            x2.'.$this->namespacePrefix.'qtipManager = new '.$protoName.' ('.
                CJSON::encode ($protoProps)
            .');
        ',CClientScript::POS_END);

        $this->addToAfterAjaxUpdate (
            "if(typeof(x2.".$this->namespacePrefix."qtipManager) !== 'undefined') { 
                x2.".$this->namespacePrefix."qtipManager.refresh (); }");
    }

    /**
     * Override of {@link CGridView::registerClientScript()}.
     *
     * Adds scripts essential to modifying the gridview (and saving its configuration).
     */
    public function registerClientScript() {
        parent::registerClientScript();
        if($this->enableGvSettings) {
            Yii::app()->clientScript->registerScriptFile(Yii::app()->getBaseUrl().
                '/js/x2gridview.js', CCLientScript::POS_END);
        }
    }

    /**
     * Echoes the markup for the gridview's table header.
     */
    public function renderTableHeader() {
        if(!$this->hideHeader) {
            // echo "<colgroup>";

            $sortDirections = $this->dataProvider->getSort()->getDirections();
            foreach($this->columns as $column) {
                // determine sort state for this column (adapted from CSort::link())
                if(property_exists($column,'name')) {
                    if(isset($sortDirections[$column->name])) {
                        $class = $sortDirections[$column->name] ? 'desc' : 'asc';
                        if(isset($column->headerHtmlOptions['class']))
                            $column->headerHtmlOptions['class'].=' '.$class;
                        else
                            $column->headerHtmlOptions['class'] = $class;
                    }
                }
                // echo ($column->headerHtmlOptions['colWidth'] === 0)? '<col>' : '<col style="width:'.$column->headerHtmlOptions['colWidth'].'px">';

                // $column->headerHtmlOptions['colWidth'] = null;
            }
            // echo "</colgroup>\n";
            echo "<thead>\n";

            if($this->filterPosition===self::FILTER_POS_HEADER)
                $this->renderFilter();

            echo "<tr>\n";
            foreach($this->columns as $column) {
                $column->renderHeaderCell();
            }
            echo "</tr>\n";

            if($this->filterPosition===self::FILTER_POS_BODY)
                $this->renderFilter();

            echo "</thead>\n";
        } else if($this->filter!==null &&
            ($this->filterPosition===self::FILTER_POS_HEADER ||
             $this->filterPosition===self::FILTER_POS_BODY)) {
            // echo "<colgroup>";
            // foreach($this->columns as $column) {
                // echo '<col width="'.$column->headerHtmlOptions['colWidth'].'">';
                // // $column->id = null;
                // $column->headerHtmlOptions['colWidth'] = null;
            // }
            // echo "</colgroup>\n";


            echo "<thead>\n";
            $this->renderFilter();
            echo "</thead>\n";
        }
    }
    public function renderTitle() {
        if(!empty($this->title))
            echo '<h2>',$this->title,'</h2>';
    }



    public function renderButtons() {
        if(0 === $count = count($this->buttons))
            return;
        if($count > 1)
            echo '<div class="x2-button-group">';
        //foreach($this->buttons as &$button) {
        $lastChildClass = '';
        for ($i = 0; $i < $count; ++$i) {//$this->buttons as &$button) {
            $button = $this->buttons[$i];
            if ($i === $count - 1) $lastChildClass = ' x2-last-child';
            switch($button) {
                case 'advancedSearch':
                    break; // remove until fixed
                    echo CHtml::link(
                        '<span></span>','#',array(
                            'title'=>Yii::t('app','Advanced Search'),
                            'class'=>'x2-button search-button'.$lastChildClass)
                        );
                    break;
                case 'clearFilters':
                    $url = array_merge(
                        array(Yii::app()->controller->action->id),
                        Yii::app()->controller->getActionParams(),
                        array('clearFilters'=>1)
                    );
                    echo CHtml::link(
                        '<span></span>',$url,array('title'=>Yii::t('app','Clear Filters'),
                        'class'=>'x2-button filter-button'.$lastChildClass)
                    );
                    break;
                case 'columnSelector':
                    echo CHtml::link(
                        '<span></span>','javascript:void(0);',array('title'=>Yii::t('app',
                        'Columns'),'class'=>'column-selector-link x2-button'.$lastChildClass)
                    );
                    break;
                case 'autoResize':
                    echo CHtml::link(
                        '<span></span>','javascript:void(0);',
                        array(
                            'title'=>Yii::t('app','Auto-Resize Columns'),
                            'class'=>'auto-resize-button x2-button'.$lastChildClass)
                        );
                    break;
                default:
                    echo $button;
            }
        }
        if($count > 1)
            echo '</div>';
    }

    public function renderFilterHint() {
        echo X2Info::hint(
            self::getFilterHintText (),false,$this->getNamespacePrefix () . '-filter-hint');
    }

    public function renderTopPager () {
        $this->controller->renderPartial (
            'application.components.views._x2GridViewTopPager', array (
                'gridId' => $this->id,
                'modelName' => $this->modelName,
                'gridObj' => $this,
                'namespacePrefix' => $this->namespacePrefix,
            )
        );
    }

    /**
     * Display mass actions ui buttons in top bar and set up related JS
     */
    public function renderMassActionButtons () {
        $auth = Yii::app()->authManager;
        $actionAccess = ucfirst(Yii::app()->controller->getId()). 'Delete';
        $authItem = $auth->getAuthItem($actionAccess);
        if(!is_null($authItem) && !Yii::app()->user->checkAccess($actionAccess)){
            if(in_array('delete',$this->massActions))
                unset($this->massActions[array_search('delete',$this->massActions)]);
        }

        $this->controller->renderPartial (
            'application.components.views._x2GridViewMassActionButtons', array (
                'UIType' => 'buttons',
                'massActions' => $this->massActions,
                'gridId' => $this->id,
                'namespacePrefix' => $this->namespacePrefix,
                'modelName' => $this->modelName,
                'gridObj' => $this,
                'fixedHeader' => $this->fixedHeader,
            ), false, ($this->ajax ? true : false)
        );
    }

    /***********************************************************************
    * Protected instance methods
    ***********************************************************************/

    /**
     * Creates column objects and initializes them.
     */
    protected function initColumns()
    {
        if($this->columns===array())
        {
            if($this->dataProvider instanceof CActiveDataProvider)
                $this->columns=$this->dataProvider->model->attributeNames();
            elseif($this->dataProvider instanceof IDataProvider)
            {
                // use the keys of the first row of data as the default columns
                $data=$this->dataProvider->getData();
                if(isset($data[0]) && is_array($data[0]))
                    $this->columns=array_keys($data[0]);
            }
        }
        $id=$this->getId();
        foreach($this->columns as $i=>$column)
        {
            if(is_string($column))
                $column=$this->createDataColumn($column);
            else
            {
                if(!isset($column['class']))
                    $column['class']='X2DataColumn';
                $column=Yii::createComponent($column, $this);
            }
            if(!$column->visible)
            {
                unset($this->columns[$i]);
                continue;
            }
            if($column->id===null)
                $column->id=$id.'_c'.$i;
            $this->columns[$i]=$column;
        }

        foreach($this->columns as $column)
            $column->init();
    }

    public function setModuleName($value) {
        $this->_moduleName = $value;
    }
}
?>
